import sbt._
import Keys._
import com.typesafe.sbt.SbtStartScript

object MryBuild extends Build {
  var commonResolvers = Seq(
    // local snapshot support
    ScalaToolsSnapshots,

    // common deps
    "Wajam" at "http://ci1.cx.wajam/",
    "Maven.org" at "http://repo1.maven.org/maven2",
    "Sun Maven2 Repo" at "http://download.java.net/maven/2",
    "Scala-Tools" at "http://scala-tools.org/repo-releases/",
    "Sun GF Maven2 Repo" at "http://download.java.net/maven/glassfish",
    "Oracle Maven2 Repo" at "http://download.oracle.com/maven",
    "Sonatype" at "http://oss.sonatype.org/content/repositories/release",
    "Cloudera" at "https://repository.cloudera.com/artifactory/cloudera-repos/",
    "Twitter" at "http://maven.twttr.com/"
  )

  var commonDeps = Seq(
    "com.wajam" %% "nrv-core" % "0.1-SNAPSHOT",
    "com.wajam" %% "spnl-core" % "0.1-SNAPSHOT",
    "com.wajam" %% "scn-core" % "0.1-SNAPSHOT",
    "com.google.protobuf" % "protobuf-java" % "2.4.1",
    "c3p0" % "c3p0" % "0.9.1.2",
    "org.rogach" %% "scallop" % "0.9.1",
    "mysql" % "mysql-connector-java" % "5.1.6",
    "org.scalatest" %% "scalatest" % "2.0" % "test,it",
    "junit" % "junit" % "4.10" % "test,it",
    "org.mockito" % "mockito-core" % "1.9.0" % "test,it"
  )

  val defaultSettings = Defaults.defaultSettings ++ Defaults.itSettings ++ Seq(
    libraryDependencies ++= commonDeps,
    resolvers ++= commonResolvers,
    retrieveManaged := true,
    publishMavenStyle := true,
    organization := "com.wajam",
    version := "0.1-SNAPSHOT",
    scalaVersion := "2.10.2",
    scalacOptions ++= Seq("-deprecation", "-unchecked", "-feature")
  )

  lazy val root = Project("mry", file("."))
    .configs(Slow)
    .configs(IntegrationTest)
    .settings(defaultSettings: _*)
    .settings(testOptions in IntegrationTest := Seq(Tests.Filter(s => s.contains("Test"))))
    .settings(SbtStartScript.startScriptForClassesSettings: _*)
    .aggregate(core)

  lazy val core = Project("mry-core", file("mry-core"))
    .configs(Slow)
    .configs(IntegrationTest)
    .settings(defaultSettings: _*)
    // See http://code.google.com/p/protobuf/issues/detail?id=368
    // We don't publish docs because it doesn't work with java generated by protobuf
    .settings(publishArtifact in packageDoc := false)
    .settings(inConfig(Slow)(Defaults.testTasks) : _*)
    .settings(
      testOptions in Test := Seq(Tests.Argument("-l","SlowTest")),
      testOptions in Slow := Seq(Tests.Argument("-n","SlowTest")))
    .settings(testOptions in Test += Tests.Setup(() => System.setProperty("actors.enableForkJoin", "false")))
    .settings(testOptions in Slow += Tests.Setup(() => System.setProperty("actors.enableForkJoin", "false")))
    .settings(testOptions in IntegrationTest += Tests.Setup(() => System.setProperty("actors.enableForkJoin", "false")))
    .settings(testOptions in IntegrationTest := Seq(Tests.Filter(s => s.contains("Test"))))
    .settings(SbtStartScript.startScriptForClassesSettings: _*)
    .settings(parallelExecution in Slow := false)
    .settings(parallelExecution in IntegrationTest := false)

  lazy val Slow = config("slow") extend Test

  import sbtprotobuf.{ProtobufPlugin => PB}

  // We keep it as a separate projet, to avoid a dependency on protoc
  // The protobuf file are under version control, so no need to generate them everytime.
  // To generate them run sbt shell them run ";project mry-proto ;protobuf:generate"
  lazy val proto = Project(
    id = "mry-proto",
    base = file("mry-core"),
    settings = defaultSettings ++ PB.protobufSettings ++ Seq(
      javaSource in PB.protobufConfig <<= (sourceDirectory in Compile)(_ / "java")
    )
  ) configs (IntegrationTest)
}

